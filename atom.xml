<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>I&#39;m Terry</title>
  <subtitle>Just another Coder and Designer</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-03-07T07:27:21.363Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Y.Tian</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>OpenGL笔记-初识OpenGL</title>
    <link href="http://yoursite.com/2016/03/07/OpenGL%E7%AC%94%E8%AE%B0-%E5%88%9D%E8%AF%86OpenGL/"/>
    <id>http://yoursite.com/2016/03/07/OpenGL笔记-初识OpenGL/</id>
    <published>2016-03-07T07:22:56.000Z</published>
    <updated>2016-03-07T07:27:21.363Z</updated>
    
    <content type="html">&lt;h1 id=&quot;LearnOpenGL-Notes&quot;&gt;&lt;a href=&quot;#LearnOpenGL-Notes&quot; class=&quot;headerlink&quot; title=&quot;LearnOpenGL Notes&quot;&gt;&lt;/a&gt;LearnOpenGL Notes&lt;/h1&gt;&lt;h2 id=&quot;Introduction-of-OpenGL&quot;&gt;&lt;a href=&quot;#Introduction-of-OpenGL&quot; class=&quot;headerlink&quot; title=&quot;Introduction of OpenGL&quot;&gt;&lt;/a&gt;Introduction of OpenGL&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;First of all, &lt;strong&gt;OpenGL&lt;/strong&gt; is not actually an API, but merely a &lt;strong&gt;specification&lt;/strong&gt;&lt;br&gt;developed and maintained by &lt;em&gt;Khronos Group&lt;/em&gt;. The OpenGL specification just specifies what the output  and perform.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;implementations&lt;/strong&gt; of actual OpenGL libraries are developed by &lt;strong&gt;graphics card manufacturers&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;OpenGL is  by itself a large &lt;strong&gt;state machine&lt;/strong&gt;, change the state, you can get what you want to draw.&lt;/li&gt;
&lt;li&gt;An &lt;strong&gt;object&lt;/strong&gt; in OpenGL is a collection of options that represents a subset of OpenGL’s state.&lt;/li&gt;
&lt;li&gt;OpenGL suggests using the &lt;strong&gt;Primitive Typesdefined by OpenGL&lt;/strong&gt;  instead of using primitive types defined by C standard grammer. This will ensure the applications work properly on multi-platforms.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&quot;LearnOpenGL笔记&quot;&gt;&lt;a href=&quot;#LearnOpenGL笔记&quot; class=&quot;headerlink&quot; title=&quot;LearnOpenGL笔记&quot;&gt;&lt;/a&gt;LearnOpenGL笔记&lt;/h1&gt;&lt;h2 id=&quot;OpenGL介绍&quot;&gt;&lt;a href=&quot;#OpenGL介绍&quot; class=&quot;headerlink&quot; title=&quot;OpenGL介绍&quot;&gt;&lt;/a&gt;OpenGL介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;首先，&lt;strong&gt;OpenGL&lt;/strong&gt;并不是一个真正意义上的API，它是由 &lt;em&gt;Khronos Group&lt;/em&gt;开发维护的一套&lt;strong&gt;技术规范&lt;/strong&gt;。规范规定了OpenGL的输出是什么样和其如何表现等&lt;/li&gt;
&lt;li&gt;真正的API库是由各大显卡厂商开发实现的。&lt;/li&gt;
&lt;li&gt;OpenGL本身实际上是一个巨大的&lt;strong&gt;状态机&lt;/strong&gt;，通过改变不同的状态，可以让OpenGL去画出你想要的图形&lt;/li&gt;
&lt;li&gt;OpenGL中的一个&lt;strong&gt;对象&lt;/strong&gt;可以理解为OpenGL中某些状态的集合&lt;/li&gt;
&lt;li&gt;OpenGL建议在使用时，尽量使用OpenGL中定义好的基础数据格式，而不是使用C标准语法中的数据格式，因为这样更有利于跨平台开发。&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LearnOpenGL-Notes&quot;&gt;&lt;a href=&quot;#LearnOpenGL-Notes&quot; class=&quot;headerlink&quot; title=&quot;LearnOpenGL Notes&quot;&gt;&lt;/a&gt;LearnOpenGL Notes&lt;/h1&gt;&lt;h2 id=&quot;Intro
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu 9.10上建立ARM-Linux交叉编译环境</title>
    <link href="http://yoursite.com/2014/12/16/2014-12-16-ubuntu-9-dot-10shang-jian-li-arm-linuxjiao-cha-bian-yi-huan-jing/"/>
    <id>http://yoursite.com/2014/12/16/2014-12-16-ubuntu-9-dot-10shang-jian-li-arm-linuxjiao-cha-bian-yi-huan-jing/</id>
    <published>2014-12-16T07:43:21.000Z</published>
    <updated>2016-03-06T13:23:16.000Z</updated>
    
    <content type="html">&lt;p&gt;这篇文章是我在2010年学习嵌入式的时候，自己动手建立交叉编译环境的一片文章。那时候获取信息没有那么丰富，也没有像现在这么多成熟的已经建立好的交叉编译环境，所以动手自己做的时候着实废了一番功夫。写完这篇文章后我就把它丢到了新浪博客上，再也没有看过它。直到最近整理博客才察觉了他的存在，现在整理一下发到目前的博客上。&lt;/p&gt;
&lt;p&gt;文章上的东西离现在的技术已经有些过时，但是其中的方法还是值得看一下的，以此来纪念一下在大学里曾经奋斗过的日子！&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;学习ARM嵌入式的人都知道，要想使PC上的程序运行在ARM板，必须建立交叉编译环境来对源代码进行编译。对于交叉编译环境的基本概念这里就不多说了，网上多得是。这里主要是写我在建立交叉编译环境时的方法步骤和一些想法。&lt;/p&gt;
&lt;p&gt;我的建立过程经历了疯狂的四天。在这四天里，我除了睡觉，吃饭，上厕所，几乎所有的时间都坐在电脑面前，只是为了最后那100多MB的文件。我终于体会到了在面对复杂的问题时的那种无助的心情。也终于知道了想当一名自由软件支持者所要具备的能力与心态（那就是怎样在困难与错误面前寻找解决办法）。&lt;/p&gt;
&lt;p&gt;学习嵌入式Linux的道路是辛苦的，尤其是DIY。为了建立一个交叉编译的环境，我便花费了4天的努力才得到结果。就那100多MB的文件，看起来没什么，可是时间成本是巨大的。这几天时间什么都没做，课也全逃掉了，有一位同学甚至还发短信问我是不是消失了?_?嘿嘿，我当然没消失，只是躲在寝室里在电脑上编译那几个文件。这就是自由软件的麻烦之处，文件之间关系依赖很复杂繁琐，初学者根本不知道其文件见的联系是怎么样的，按着网上的步骤出现了错误也不知原因。编译中总是有那些莫名奇怪的错误，有了错误怎么办，上网查，看README文档，看标准，上各个BBS上去问，国内的网站没有，还得去国外网站上去查汗。有的错误还好，是常见的，有解决方案色；有的错误有成百上千种原因，我不可能一一去试晕；甚至有两次我还编译出了连网上都不存在的错误，我更是晕了惊恐。有时候编译总是不过，我便把全部文件删除然后重新来做，这样反反复复不知有多少次吐。怪不得有人说做交叉编译环境是要靠运气的。&lt;/p&gt;
&lt;p&gt;不过还好，我在国外的一个网站中找到一个版本较为新的建立步骤，而且通过率很高，没什么大的错误。下面便进入正题，把我的建立过程写下来。&lt;/p&gt;
&lt;h2 id=&quot;准备文件&quot;&gt;&lt;a href=&quot;#准备文件&quot; class=&quot;headerlink&quot; title=&quot;准备文件&quot;&gt;&lt;/a&gt;准备文件&lt;/h2&gt;&lt;p&gt;我的电脑是装的Ubuntu 9.10 Linux，不是虚拟机。想建立交叉编译环境，首先你的电脑中得有编译环境，就是那些常见的，例如GCC等。这个我就不写了，网上也是多得是，太常见了。&lt;/p&gt;
&lt;p&gt;然后，我们要下载建立所需要的文件。这是列表：&lt;/p&gt;
&lt;p&gt;源代码文件及其版本与下载地址：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://ftp.gnu.org/gnu/binutils/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;binutils-2.19.1.tar.bz2&lt;/a&gt;       &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ftp.gnu.org/gnu/gcc/gcc-4.3.3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gcc-4.3.3.tar.bz2&lt;/a&gt;            &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ftp.gnu.org/gnu/glibc/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;glibc-2.11.tar.bz2&lt;/a&gt;          &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ftp.gnu.org/gnu/glibc/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;glibc-ports-2.11.tar.bz2&lt;/a&gt;      &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ftp.gnu.org/pub/gnu/gmp/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gmp-4.2.4.tar.bz2&lt;/a&gt;          &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ftp.kernel.org/pub/linux/kernel/v2.6/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;linux-2.6.30.1.tar.bz2&lt;/a&gt;       &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.mpfr.org/mpfr-2.4.1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mpfr-2.4.1.tar.bz2&lt;/a&gt;        &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;补丁包版本及其下载地址：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://ftp.crosslfs.org/pub/clfs/conglomeration/binutils/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;binutils-2.19.1-branch_update-1.patch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ftp.cross-lfs.org/pub/clfs/conglomeration/binutils/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;binutils-2.19.1-posix-1.patch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ftp.lfs-matrix.net/pub/clfs/conglomeration/gcc/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gcc-4.3.3-branch_update-5.patch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ftp.lfs-matrix.net/pub/clfs/conglomeration/gcc/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gcc-4.3.3-posix-1.patch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://svn.exactcode.de/t2/trunk/package/base/glibc/gcc_eh.patch.cross&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gcc_eh.patch.cross&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cross-lfs.org/files/packages/embedded-0.0.1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mpfr-2.4.1-branch_update-1.patch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cross-lfs.org/files/packages/embedded-0.0.1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mpfr-2.4.1-branch_update-2.patch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注：1. 对于版本的要求：刚开始时很多人都会选用各个源代码最新的版本，其实没必要，也不好。其一，你的板子不一定支持这么新的源代码；其二，因为新的版本中会加入新的东西，当你按着原先的方法进行编译时会出错误，而你又不知道错误在哪，这是很麻烦的，我就吃了这方面的亏，所以当你是新人时，尽量选择网上成功例子的版本，这样会出错的概率会小一些。当然，如说你是高手或者对Linux下各个源代码的编译过程有所了解，那就例外了。2. 打补丁的方法：打补丁的方法很简单，首先进入你想要打补丁的文件夹，然后执行&lt;code&gt;patch -p1 &amp;lt; path\to\your patch document&lt;/code&gt;(就是你的补丁文件的路径，还要注意“&amp;lt;”前后是有空格的),例如：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$cd binutils-2.19.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$patch -p1 &amp;lt; /home/Yourname/binutils-2.19.1-branch_update-1.patch&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果你想详细了解请看：&lt;a href=&quot;http://www.diybl.com/course/6_system/linux/Linuxjs/2008826/137710.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.diybl.com/course/6_system/linux/Linuxjs/2008826/137710.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然后我们开始要建立文件目录：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/home/Yourname/ARM/--Build /*存放源代码的目录/--binutils/*二进制文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  |                         | --gcc/*编译器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  |                         | --glibc/*C库文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  |--Linux-Kernel /*存放内核的目录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  |--Cross-Compile /*工具安装目录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;建立好了目录之后，将各个源代码文件放入对应的文件夹中，这时../Build/binutils中应该有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;binutils-2.19.1.tar.bz2&lt;/li&gt;
&lt;li&gt;binutils-2.19.1-branch_update-1.patch&lt;/li&gt;
&lt;li&gt;binutils-2.19.1-posix-1.patch&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;/Build/gcc中应该有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gcc-4.3.3.tar.bz2&lt;/li&gt;
&lt;li&gt;gmp-4.2.4.tar.bz2&lt;/li&gt;
&lt;li&gt;mpfr-2.4.1.tar.bz2&lt;/li&gt;
&lt;li&gt;gcc-4.3.3-branch_update-5.patch&lt;/li&gt;
&lt;li&gt;gcc-4.3.3-posix-1.patch&lt;/li&gt;
&lt;li&gt;mpfr-2.4.1-branch_update-1.patch&lt;/li&gt;
&lt;li&gt;mpfr-2.4.1-branch_update-2.patch&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Build/glibc中应该有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;glibc-2.11.tar.bz2&lt;/li&gt;
&lt;li&gt;glibc-ports-2.11.tar.bz2&lt;/li&gt;
&lt;li&gt;gcc_eh.patch.cross&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Linux-Kernel中应该有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;linux-2.6.30.1.tar.bz2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;紧接着，解压缩各个文件，对应打好补丁。然后，将&lt;strong&gt;gmp-4.2.4&lt;/strong&gt;改名&lt;strong&gt;gmp&lt;/strong&gt;和&lt;strong&gt;mpfr-2.4.1&lt;/strong&gt;改名&lt;strong&gt;mpfr&lt;/strong&gt;放入&lt;strong&gt;gcc-4.3.3&lt;/strong&gt;文件夹中。将&lt;strong&gt;glibc-ports-2.11&lt;/strong&gt;改名为&lt;strong&gt;ports&lt;/strong&gt;放入&lt;strong&gt;glibc-2.11&lt;/strong&gt;中。&lt;/p&gt;
&lt;p&gt;对于Ubuntu的用户，有一工具叫做&lt;strong&gt;mawk&lt;/strong&gt;,我不知道是干什么用的，但是对于建立交叉编译环境是不利的，要换成&lt;strong&gt;gawk&lt;/strong&gt;,具体方法可以google。&lt;/p&gt;
&lt;p&gt;到目前为止，文件准备工作已全部完毕。&lt;/p&gt;
&lt;h2 id=&quot;建立二进制工具（binutils）&quot;&gt;&lt;a href=&quot;#建立二进制工具（binutils）&quot; class=&quot;headerlink&quot; title=&quot;建立二进制工具（binutils）&quot;&gt;&lt;/a&gt;建立二进制工具（binutils）&lt;/h2&gt;&lt;p&gt;建立环境变量：&lt;br&gt;&lt;code&gt;$vim ~/.bashrc&lt;/code&gt;在最先面加入如下的代码：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;export PRJROOT=/home/Yourname/ARM&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export PREFIX=$PRJROOT/Cross-Compile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export TARGET=arm-linux&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export PATH=$PREFIX/tools/bin:$PATH&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export host=i486-cross-linux-gnu&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后在终端执行&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$cd /home/Youname/ARM/Build/binutils&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$mkdir b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$cd b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$AR=ar AS=as ../binutils-2.19.1/configure \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--build=i486-cross-linux-gnu \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--host=i486-cross-linux-gnu \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--target=$TARGET \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--prefix=$PREFIX/tools \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--with-sysroot=$PREFIX \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--disable-nls --enable-shared --disable-multilib  --disable-werror&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：“\”不能省且前有空格&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$make all&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$make install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;看一下&lt;code&gt;$PREFIX/tools/bin&lt;/code&gt;下的生成的文件都是用来干什么的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;add2line - 将你要找的地址转成文件和行号，它要使用 debug 信息。&lt;/li&gt;
&lt;li&gt;Ar-产生、修改和解开一个存档文件&lt;/li&gt;
&lt;li&gt;As-gnu 的汇编器C++filt-C++ 和 java 中有一种重载函数，所用的重载函数最后会被编译转化成汇编的标号，c++filt 就是实现这种反向的转化，根据标号得到函数名。&lt;/li&gt;
&lt;li&gt;Gasp-gnu 汇编器预编译器。&lt;/li&gt;
&lt;li&gt;Ld-gnu 的连接器Nm-列出目标文件的符号和对应的地址Objcopy-将某种格式的目标文件转化成另外格式的目标文件Objdump-显示目标文件的信息&lt;/li&gt;
&lt;li&gt;Ranlib-为一个存档文件产生一个索引，并将这个索引存入存档文件中&lt;/li&gt;
&lt;li&gt;Readelf-显示 elf 格式的目标文件的信息&lt;/li&gt;
&lt;li&gt;Size-显示目标文件各个节的大小和目标文件的大小&lt;/li&gt;
&lt;li&gt;Strings-打印出目标文件中可以打印的字符串，有个默认的长度，为4&lt;/li&gt;
&lt;li&gt;Strip-剥掉目标文件的所有的符号信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;建立内核头文件-Linux-Kernel&quot;&gt;&lt;a href=&quot;#建立内核头文件-Linux-Kernel&quot; class=&quot;headerlink&quot; title=&quot;建立内核头文件(Linux Kernel)&quot;&gt;&lt;/a&gt;建立内核头文件(Linux Kernel)&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$cd $PRJROOT/Linux-Kernel/linux-2.6.30.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$mkdir -p $PREFIX/usr/include&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$make mrproper&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$make ARCH=arm headers_check&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$make ARCH=arm INSTALL_HDR_PATH=dest headers_install&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$cp -rv dest/include/* $PREFIX/usr/include&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$find $PREFIX/usr/include -name .install -or -name ..install.cmd | xargs rm -fv&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;建立初始编译器（bootstrap-gcc）&quot;&gt;&lt;a href=&quot;#建立初始编译器（bootstrap-gcc）&quot; class=&quot;headerlink&quot; title=&quot;建立初始编译器（bootstrap gcc）&quot;&gt;&lt;/a&gt;建立初始编译器（bootstrap gcc）&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$cd $PRJROOT/Build/gcc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$mkdir g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$cd g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$AR=ar LDFLAGS=&amp;quot;-Wl,-rpath,$PREFIX/lib&amp;quot; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/home/polaris/ARM/build/gcc/gcc-4.3.3/configure \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--build=i486-cross-linux-gnu \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--host=i486-cross-linux-gnu \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--target=arm-linux \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--prefix=$PREFIX/tools \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--enable-languages=c \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--disable-nls --disable-shared --disable-threads \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--disable-libmudflap --disable-libssp --disable-libgomp \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--disable-decimal-float --without-headers --with-newlib \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--with-sysroot=$PREFIX&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$make&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$make install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们来看看&lt;code&gt;$PREFIX/bin&lt;/code&gt;里面多了哪些东西，你会发现多了&lt;strong&gt;arm-linux-gcc&lt;/strong&gt;、&lt;strong&gt;arm-linux-unprotoize&lt;/strong&gt;、&lt;strong&gt;cpp&lt;/strong&gt;和&lt;strong&gt;gcov&lt;/strong&gt;几个文件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gcc-gnu 的 C 语言编译器&lt;/li&gt;
&lt;li&gt;Unprotoize-将 ANSI C 的源码转化为 K&amp;amp;R C 的形式，去掉函数原型中的参数类型。&lt;/li&gt;
&lt;li&gt;Cpp-gnu的 C 的预编译器&lt;/li&gt;
&lt;li&gt;Gcov-gcc 的辅助测试工具，可以用它来分析和优程序。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;建立-c-库-glibc&quot;&gt;&lt;a href=&quot;#建立-c-库-glibc&quot; class=&quot;headerlink&quot; title=&quot;建立 c 库(glibc)&quot;&gt;&lt;/a&gt;建立 c 库(glibc)&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$cd $PRJROOT/Build/glibc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$mkdir g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$cd g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$echo &amp;quot;libc_cv_forced_unwind=yes&amp;quot; &amp;gt; config.cache \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo &amp;quot;libc_cv_c_cleanup=yes&amp;quot; &amp;gt;&amp;gt; config.cache \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo &amp;quot;libc_cv_arm_tls=yes&amp;quot; &amp;gt;&amp;gt; config.cache&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$BUILD_CC=&amp;quot;gcc&amp;quot; CC=arm-linux-gcc AR=arm-linux-ar RANLIB=arm-linux-ranlib&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$$PRJROOT/build/glibc/glibc-2.11/configure \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--build=i486-cross-linux-gnu \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--host=arm-linux \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--target=arm-linux \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--prefix=$PREFIX/usr \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--with-tls --disable-profile --enable-add-ons \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--enable-kernel=2.6.0 --with-__thread \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--with-binutils=$PREFIX/tools/bin \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--with-headers=$PREFIX/usr/include \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--cache-file=config.cache&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$make all&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$make install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后你还要修改&lt;strong&gt;libc.so&lt;/strong&gt;文件，将&lt;strong&gt;GROUP ( /lib/libc.so.6 /lib/libc_nonshared.a)&lt;/strong&gt;改为&lt;br&gt;&lt;strong&gt;GROUP ( libc.so.6 libc_nonshared.a)&lt;/strong&gt;这样连接程序&lt;strong&gt;ld&lt;/strong&gt;就会在&lt;strong&gt;libc.so&lt;/strong&gt;所在的目录查找它需要的库，因为你的机子的/lib目录可能已经装了一个相同名字的库，一个为编译可以在你的宿主机上运行的程序的库，而不是用于交叉编译的。&lt;/p&gt;
&lt;h2 id=&quot;建立全套编译器（full-gcc）&quot;&gt;&lt;a href=&quot;#建立全套编译器（full-gcc）&quot; class=&quot;headerlink&quot; title=&quot;建立全套编译器（full gcc）&quot;&gt;&lt;/a&gt;建立全套编译器（full gcc）&lt;/h2&gt;&lt;p&gt;在建立boot-gcc 的时候，我们只支持了C。到这里，我们就要建立全套编译器，来支持C和C++。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$cd $PRJROOT/Build/gcc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$mkdir g1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$cd g1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$/home/polaris/ARM/build/gcc/gcc-4.3.3/configure \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--build=i486-cross-linux-gnu \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--host=i486-cross-linux-gnu \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--target=arm-linux \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--prefix=$PREFIX/tools \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--enable-languages=c,c++ --enable-c99 \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--enable-threads=posix --enable-long-long --enable-shared \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--enable-__cxa_atexit --disable-multilib --disable-nls --disable-libgomp \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--with-sysroot=$PREFIX&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$make&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$make install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们再来看看&lt;strong&gt;$PREFIX/bin&lt;/strong&gt;里面多了哪些东西。你会发现多了&lt;strong&gt;arm-linux-g++&lt;/strong&gt;、&lt;strong&gt;arm-linux-protoize&lt;/strong&gt;和&lt;strong&gt;arm-linux-c++&lt;/strong&gt;几个文件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;G++-gnu的 c++ 编译器。&lt;/li&gt;
&lt;li&gt;Protoize-与Unprotoize相反，将K&amp;amp;R C的源码转化为ANSI C的形式，函数原型中加入参数类型。&lt;/li&gt;
&lt;li&gt;C++-gnu 的 c++ 编译器。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;至此，整个交叉编译环境就建立完成了。&lt;/p&gt;
&lt;h2 id=&quot;测试（Test）&quot;&gt;&lt;a href=&quot;#测试（Test）&quot; class=&quot;headerlink&quot; title=&quot;测试（Test）&quot;&gt;&lt;/a&gt;测试（Test）&lt;/h2&gt;&lt;p&gt;写一个Hello World程序来测试你的交叉编译环境&lt;br&gt;&lt;code&gt;$vim hello.c&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int main()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    printf(&amp;quot;Hello World!\n&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$arm-linux-gcc hello.c -o hello&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$file hello&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hello: ELF 32-bit LSB executable, ARM, version 1, dynamically linked (uses shared libs), not stripped&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的输出说明你编译了一个能在 arm 体系结构下运行的 helloworld，证明你的编译工具做成功了！&lt;/p&gt;
&lt;h2 id=&quot;后序&quot;&gt;&lt;a href=&quot;#后序&quot; class=&quot;headerlink&quot; title=&quot;后序&quot;&gt;&lt;/a&gt;后序&lt;/h2&gt;&lt;p&gt;以上是我的建立过程方法，因为每个人手中的电脑配置不同且Linux内部环境设置也不一样，按此步骤建立不一定能够正确建立。因此本文只作为参考，在建立过程中要多用网络来寻找解决问题的方法，这样才能建立一个完整的交叉编译环境。如若本文有错误，敬请原谅！&lt;/p&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.chinaunix.net/u2/60303/showart_2159276.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;自己实验建立交叉编译工具链&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/cn/linux/l-embcmpl/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如何为嵌入式开发建立交叉编译环境&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章是我在2010年学习嵌入式的时候，自己动手建立交叉编译环境的一片文章。那时候获取信息没有那么丰富，也没有像现在这么多成熟的已经建立好的交叉编译环境，所以动手自己做的时候着实废了一番功夫。写完这篇文章后我就把它丢到了新浪博客上，再也没有看过它。直到最近整理博客才察觉了他的存在，现在整理一下发到目前的博客上。&lt;/p&gt;
&lt;p&gt;文章上的东西离现在的技术已经有些过时，但是其中的方法还是值得看一下的，以此来纪念一下在大学里曾经奋斗过的日子！&lt;br&gt;
    
    </summary>
    
      <category term="C/C++" scheme="http://yoursite.com/categories/C-C/"/>
    
    
  </entry>
  
  <entry>
    <title>使用网盘建造Git私有仓库</title>
    <link href="http://yoursite.com/2014/12/15/2014-12-15-shi-yong-wang-pan-jian-zao-gitsi-you-cang-ku/"/>
    <id>http://yoursite.com/2014/12/15/2014-12-15-shi-yong-wang-pan-jian-zao-gitsi-you-cang-ku/</id>
    <published>2014-12-15T07:42:05.000Z</published>
    <updated>2016-03-06T13:13:42.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;Github&lt;/strong&gt;是个好东西，但是好东西也有缺点，那就是免费用户不能使用私有库，我们不可能将所有的代码都设为共享，毕竟有些东西我们只是为了给自己使用，那么怎样才能既使用Git来管理自己的代码版本，又能使其在备份到网络上，且是私有的。这时候我们就要靠网盘了~&lt;/p&gt;
&lt;p&gt;目前市面上的网盘可以说是各种各样，国外比较知名的有Dropbox，Google Drive，Sky Drive，国内的更是各大互联网厂商都有自己的网盘，百度云，快盘，酷盘，360网盘等等。在网盘的选择上，还是要看个人喜好，总体而言，从知名度和安全度上来讲，国外网盘有比较大的优势，切覆盖系统平台齐全，但是由于国内的网络环境，国外网盘能在国内使用的少之又少，如果不借助点工具，是基本使用不了的，这个时候只能选择国内的网盘。国内网盘本人使用的是金山快盘，原因就是容量大，且使用时间比较长， 各方面也还算满意。这里就讲一下如何利用&lt;strong&gt;金山快盘&lt;/strong&gt;建立Git私有仓库。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;我们先来简单看一下&lt;strong&gt;Git&lt;/strong&gt;放工作原理。如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images.cnitblog.com/blog/376712/201301/23161453-bfff99659bcc447db74a94d17210c4f2.png&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
&lt;p&gt;从上图我们可以看到本地的&lt;strong&gt;repository&lt;/strong&gt;保存着Git提交的变更信息，而&lt;code&gt;push&lt;/code&gt;操作便是将其推送到云端。利用网盘建立私有云的原理很简单，就是将repository建立在网盘的同步目录内，通过网盘的同步作用将其变更信息保存在云端，如同下图所示&lt;/p&gt;
&lt;img src=&quot;/uploads/kuaipangit.png&quot;&gt;
&lt;p&gt;首先在网盘的同步目录中建立&lt;strong&gt;repository&lt;/strong&gt;。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; ~/KuaiPan        &lt;span class=&quot;comment&quot;&gt;#进入网盘同步目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mkdir repo          &lt;span class=&quot;comment&quot;&gt;#建立仓库根目录，以后每个项目的单独仓库都建在此目录下&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; repo             &lt;span class=&quot;comment&quot;&gt;#进入仓库根目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mkdir [name].git    &lt;span class=&quot;comment&quot;&gt;#建立项目仓库，[name]为项目名称&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; [name].git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git init --bare     &lt;span class=&quot;comment&quot;&gt;#初始化git仓库&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里要注意一下&lt;code&gt;git init --bare&lt;/code&gt;，其含义是建立没有工作区的仓库，也就意味这个仓库下只有变更信息共享使用，而不会存在工作目录。以上目录建好以后，起作用已经跟&lt;strong&gt;GitHub&lt;/strong&gt;差不多了。我们只需将所有的推送都指向这个目录，就可以实现网端对其同步了。&lt;/p&gt;
&lt;p&gt;接着正常的建立工作目录。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; ~/workspace      &lt;span class=&quot;comment&quot;&gt;#切换到工作空间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mkdir [name]        &lt;span class=&quot;comment&quot;&gt;#建立项目目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;  [name]          &lt;span class=&quot;comment&quot;&gt;#切换到项目目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git init            &lt;span class=&quot;comment&quot;&gt;#初始化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;将在网盘同步目录中的仓库链接到Git Server&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git add .&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;touch READM.md&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git commit --all -m &lt;span class=&quot;string&quot;&gt;&quot;Initial commit&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git remote add LocalGit ~/KuaiPan/repo/[name].git/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git push LocalGit master&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;提交成功后，等到网盘同步完成后，Git仓库便会保存到云端了，间接的实现了Git私有库的建立，很好很强大！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;参考文章：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://ibruce.info/2013/12/30/git-with-dropbox/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用Dropbox建立Git私有仓库&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://weizhifeng.net/git-with-dropbox.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;把Dropbox改造为Git私有仓库&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Github&lt;/strong&gt;是个好东西，但是好东西也有缺点，那就是免费用户不能使用私有库，我们不可能将所有的代码都设为共享，毕竟有些东西我们只是为了给自己使用，那么怎样才能既使用Git来管理自己的代码版本，又能使其在备份到网络上，且是私有的。这时候我们就要靠网盘了~&lt;/p&gt;
&lt;p&gt;目前市面上的网盘可以说是各种各样，国外比较知名的有Dropbox，Google Drive，Sky Drive，国内的更是各大互联网厂商都有自己的网盘，百度云，快盘，酷盘，360网盘等等。在网盘的选择上，还是要看个人喜好，总体而言，从知名度和安全度上来讲，国外网盘有比较大的优势，切覆盖系统平台齐全，但是由于国内的网络环境，国外网盘能在国内使用的少之又少，如果不借助点工具，是基本使用不了的，这个时候只能选择国内的网盘。国内网盘本人使用的是金山快盘，原因就是容量大，且使用时间比较长， 各方面也还算满意。这里就讲一下如何利用&lt;strong&gt;金山快盘&lt;/strong&gt;建立Git私有仓库。&lt;br&gt;
    
    </summary>
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
  </entry>
  
  <entry>
    <title>TeX的家族：LaTeX， pdfTeX， XeTeX， LuaTeX和ConTeXt</title>
    <link href="http://yoursite.com/2014/12/09/2014-12-09-texde-da-jia-zu/"/>
    <id>http://yoursite.com/2014/12/09/2014-12-09-texde-da-jia-zu/</id>
    <published>2014-12-09T11:41:49.000Z</published>
    <updated>2016-03-06T13:32:46.000Z</updated>
    
    <content type="html">&lt;p&gt;最近这段时间一直在研究LaTeX，但是一直被各种各样的词汇搞到晕头转向，后来找到了两篇文章，文章中对于各种名词的解释比较到位，并从TeX的发展讲解了整个历史，其中一个作者更是绘制出了整个家族树，对于理解TeX的历史很有帮助，奈何两篇文章都是英文，这么好的文章应该分享给国内的朋友们，同时也为了回忆一下自己之前学的英语，这里翻译了其中的一篇文章，如果有错误，还望大家原谅&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;em&gt;ShareLaTeX&lt;/em&gt;刚刚支持了&lt;em&gt;pdflatex&lt;/em&gt;，&lt;em&gt;latex&lt;/em&gt;和&lt;em&gt;xelatex&lt;/em&gt;编译环境，你知道这些都是什么意思吗？请往下看。&lt;br&gt;LaTeX的故事可以追溯到1978年，&lt;strong&gt;高德纳（ Donald Knuth）&lt;/strong&gt;第一次觉察到需要有一套高质量的排版系统。那时他构建的排版系统为后来LaTeX的质量提供了良好的保障。虽然近几十年来很多的功能被添加了进去，但是直到今天，它仍然是最好的排版工具。事实上，LaTeX就是在高德纳原生系统中添加功能而发展来的，那个原生系统叫做&lt;strong&gt;TeX&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;原生TeX&quot;&gt;&lt;a href=&quot;#原生TeX&quot; class=&quot;headerlink&quot; title=&quot;原生TeX&quot;&gt;&lt;/a&gt;原生TeX&lt;/h2&gt;&lt;p&gt;原生的TeX衍生出了一个庞大的工具家族，当你第一次去了解这个家族时，你看到的是LaTeX， pdfTeX， XeLaTeX， LuaTeX和ConTeXt等等这些让人发晕的东西。这些东西的老祖宗就是高德纳发明的TeX。TeX可以使一个普通的文本文档变成美丽的排版文档。高德纳非常注重TeX系统中对于细节的处理，一个简单的TeX例子如下下：&lt;br&gt;&lt;figure class=&quot;highlight tex&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;\&lt;span class=&quot;name&quot;&gt;TeX&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;/span&gt; is good at typesetting words like `fjord&#39;， `efficiency&#39;，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;and `fiasco&#39;. It is also good at typesetting math like，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;formula&quot;&gt;$a^2 + b^2 = c^2$&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;\&lt;span class=&quot;name&quot;&gt;bye&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;通过TeX程序生成的文档就变成了下面这个样子&lt;/p&gt;
&lt;img src=&quot;/uploads/tex-example.png&quot;&gt;
&lt;p&gt;注意例子当中的&lt;strong&gt;fi&lt;/strong&gt;， &lt;strong&gt;fj&lt;/strong&gt;， &lt;strong&gt;ff&lt;/strong&gt;是怎样完美的组合到一起的，还有数学公式是怎样完美的被呈现的。从更大的方面来说，TeX非常擅长处理那些特殊位置出现的断行和连字符，并且很好的放置它们。&lt;/p&gt;
&lt;p&gt;TeX不仅仅在排版方面表现出众，它还有一堆强大的命令，正如上面例子中的&lt;code&gt;\bye&lt;/code&gt;和&lt;code&gt;\TeX&lt;/code&gt;。这些命令可以做简单的事情例如改变字体大小，或者文档的行文方向，还可以做出一些强大的功能比如保持页面中段落的交叉引用，或者自动生成目录等等。TeX系统大概内建了300条命令，除此之外还支持根据这些命令重新建立新的命令。高德纳教授额外编写了大约600条有用的命令，并将它们放置到叫做&lt;strong&gt;Plain TeX&lt;/strong&gt;的包里以便使通常的排版方便些。&lt;/p&gt;
&lt;h2 id=&quot;LaTeX&quot;&gt;&lt;a href=&quot;#LaTeX&quot; class=&quot;headerlink&quot; title=&quot;LaTeX&quot;&gt;&lt;/a&gt;LaTeX&lt;/h2&gt;&lt;p&gt;TeX和Plain TeX中的命令仍然很基础，而且不是很容易理解和运用。为了解决这个问题，&lt;strong&gt;Leslie Lamport&lt;/strong&gt;教授在19世纪80年代早期创造了一个基于TeX的更高层次的语言，叫做&lt;strong&gt;LaTeX&lt;/strong&gt;。LeTeX是以TeX底层命令为基础重新定义的命令集，而且被赋予了许多含义。当你使用LaTeX命令的时候，实际上它会被解析成底层的TeX命令，除非你直接只用原有的TeX命令。一些概念像&lt;code&gt;(\usepackage{...})， environments (\begin{environment} ... \end{environment})&lt;/code&gt;和&lt;code&gt;document classes (\documentclass{...})&lt;/code&gt;都被Leslie Lamport教授加入了LaTeX。&lt;/p&gt;
&lt;p&gt;Leslie Lamport教授除了建立了LaTeX标准包之外，还允许开源社区对其进行发展。到目前为止，已经有了成千上万的LaTeX包可以让你实现从画图到编花纹各种各样的排版，还有学学多多的文档类让你应付不同的文档排版，无论你是写一本书，一份实验报告还是一份简历。许多出版商和期刊杂志都有他们自己的模板以满足己方需求。&lt;/p&gt;
&lt;h2 id=&quot;pdfTeX&quot;&gt;&lt;a href=&quot;#pdfTeX&quot; class=&quot;headerlink&quot; title=&quot;pdfTeX&quot;&gt;&lt;/a&gt;pdfTeX&lt;/h2&gt;&lt;p&gt;自从TeX系统诞生以来已过20多载，但其表现是相当的稳定，高德纳在1989年宣布所有功能都被定型，以后所做的工作只是BUG得修改。当然，这并没有停止LaTeX不断前进的脚步。事实上，由于TeX系统的异常稳定，使得各种各样像LaTeX一样的衍生版可以不断繁荣发展。&lt;/p&gt;
&lt;p&gt;注意，这里并不是说底层TeX系统在这20年里没有一点进步，在TeX系统性能稳定的基础上，所有的衍生工具都是伴随着TeX而一起向前发展的。最重要的一次改进便是在19世纪90年代&lt;strong&gt;Hàn The Thành&lt;/strong&gt;作为他的攻读博士主题所创作出得&lt;strong&gt;pdfTeX&lt;/strong&gt;。原生TeX系统所产生的排版文档格式叫做&lt;strong&gt;DVI(DeVice Independent format)&lt;/strong&gt;，这个文件可以转换成&lt;strong&gt;Postscript&lt;/strong&gt;格式最终打印出来。然而自从1993年PDF格式诞生以来我们看到了PDF是比postscript更好的一种文档格式。PDF有很多优点，譬如段落中的超链接，段落的元数据可以让你在PDF浏览器的左边看到文档的整个目录，而且还支持越来越多的现代图片格式。pdfTeX便是对TeX进行了修改使其可以直接输出PDF文档格式。&lt;/p&gt;
&lt;p&gt;今天当你安装了一个LaTeX的发行版之后，其里面就包含了两个程序——&lt;strong&gt;TeX&lt;/strong&gt;和&lt;strong&gt;pdfTeX&lt;/strong&gt;。同时发行版应该也会包含另外另个程序&lt;strong&gt;LaTeX&lt;/strong&gt;和&lt;strong&gt;pdfLaTeX&lt;/strong&gt;，但这两个只不过是&lt;strong&gt;TeX&lt;/strong&gt;和&lt;strong&gt;pdfTeX&lt;/strong&gt;分别对应的高级封装而已。如果你运行的是&lt;strong&gt;TeX&lt;/strong&gt;和&lt;strong&gt;LaTeX&lt;/strong&gt;，你将得到DVI文件，进一步会处理成postscript或者PDF。而如果你使用了&lt;strong&gt;pdfTeX&lt;/strong&gt;或&lt;strong&gt;pdfLaTeX&lt;/strong&gt;，你便可以直接得到PDF文件。&lt;/p&gt;
&lt;p&gt;多数情况下，pdfTeX和pdfLaTeX要比TeX和LaTeX有更强大的功能，但只有一个缺点。原生TeX和DVI格式支持&lt;strong&gt; encapsulated postscript images (.eps) &lt;/strong&gt;图像格式，并可以将其轻松的嵌入到postscript文件中，pdfTeX却不行，它只能将其转化为PDF格式，再进行嵌入（通常来讲LaTeX的发行版中都会包含&lt;strong&gt;epstopdf&lt;/strong&gt;，这个程序可以将&lt;strong&gt;.eps&lt;/strong&gt;文件转换为&lt;strong&gt;.pdf&lt;/strong&gt;文件），除此之外，pdfTeX可以支持.png，.jpg，.pdf图像格式。&lt;/p&gt;
&lt;h2 id=&quot;XeLaTeX和LuaTeX&quot;&gt;&lt;a href=&quot;#XeLaTeX和LuaTeX&quot; class=&quot;headerlink&quot; title=&quot;XeLaTeX和LuaTeX&quot;&gt;&lt;/a&gt;XeLaTeX和LuaTeX&lt;/h2&gt;&lt;p&gt;到目前为止我们看到TeX系统自诞生以来已经发展出两条不同的路线：一条是为了更好地在顶层使用原生TeX系统而建立的LaTeX，另一条路线就是为了支持PDF输出而建立的pdfTeX。故事并没有结束，还有许许多多的功能没有被添加进TeX这个大家族中。2004年&lt;strong&gt;Jonathon Kew&lt;/strong&gt;创造了&lt;strong&gt;XeTeX&lt;/strong&gt;，这是另一个以原生TeX引擎为底层的高级语言集，这次不仅使得排版系统支持原有的英文数字和字母，还支持了现代的各国字体。这使得其他非英文文字国家使用TeX系统更加容易方便，同时可以让原本只能在文档处理器中使用的字体应用到LaTeX文档当中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;LuaTeX&lt;/strong&gt;是为了让TeX系统更能贴近现有的编程语言，其思想就是让TeX可以像编程语言一样可以做任何你想做的事情，对于目前来说LaTeX的内部构造对于不熟悉TeX系统的人是很难理解的。&lt;strong&gt;Lua&lt;/strong&gt;是一种简单，稳定的脚本语言，对于扩展LaTeX宏包来说比较理想。但是到2012年它的API仍然不是很稳定，所以还不能使用。&lt;/p&gt;
&lt;h2 id=&quot;ConTeXt&quot;&gt;&lt;a href=&quot;#ConTeXt&quot; class=&quot;headerlink&quot; title=&quot;ConTeXt&quot;&gt;&lt;/a&gt;ConTeXt&lt;/h2&gt;&lt;p&gt;我们在上文提到过LaTeX作为原生TeX系统的一种命令集扩展，但这不是唯一的一个扩展包。1990年&lt;strong&gt;Hans Hagen&lt;/strong&gt;建立了另一个扩展系统&lt;strong&gt;ConTeXt&lt;/strong&gt;。LaTeX的主要目的在于使作者从繁琐的排版中解脱出来，当你使用&lt;code&gt;\section&lt;/code&gt;或者&lt;code&gt;\emph&lt;/code&gt;命令的时候，你不用去在乎它们会怎样做，这些会留给系统处理。另一方面来讲，ConTeXt可以说是提供了更加方便的排版写作方式。不过我对其不是很熟悉，所以这里不便过多介绍。&lt;/p&gt;
&lt;p&gt;作为一个历史回顾，我不得不提起&lt;strong&gt;AMSTeX&lt;/strong&gt;，这是由&lt;strong&gt;美国数学协会（AMS）&lt;/strong&gt;从1982年到1985年所创建的文本文档宏包，它仍然存在于当前的宏包中，很多文档的开始你都会见到它&lt;code&gt;\usepackage{amsmath}&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;未来&quot;&gt;&lt;a href=&quot;#未来&quot; class=&quot;headerlink&quot; title=&quot;未来&quot;&gt;&lt;/a&gt;未来&lt;/h2&gt;&lt;p&gt;TeX和LaTeX的未来会是什么样？我不知道，但是Alan Kay曾经说过&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;“&lt;/strong&gt; 预测未来最好的方式就是创造未来！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;以下是另一个作者所总结的家族树，&lt;a href=&quot;http://disco.bu.edu/~tsl/TeX-Family-Tree-Timeline/tft-portrait.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点击可以查看PDF&lt;/a&gt;&lt;/p&gt;
&lt;img src=&quot;/uploads/latex_family_tree_l.jpg&quot;&gt;
&lt;p&gt;原文地址：&lt;a href=&quot;https://www.sharelatex.com/blog/2012/12/01/the-tex-family-tree-latex-pdftex-xelatex-luatex-context.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The TeX family tree: LaTeX, pdfTeX, XeTeX, LuaTeX and ConTeXt&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;家族树地址：&lt;a href=&quot;http://tex.stackexchange.com/questions/42594/tex-family-tree-with-timeline&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TeX family tree with timeline?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原作者： James Allen, Todd Lehman&lt;/p&gt;
&lt;p&gt;翻译：@胖老鼠&lt;/p&gt;
&lt;p&gt;时间：01 Dec 2012&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近这段时间一直在研究LaTeX，但是一直被各种各样的词汇搞到晕头转向，后来找到了两篇文章，文章中对于各种名词的解释比较到位，并从TeX的发展讲解了整个历史，其中一个作者更是绘制出了整个家族树，对于理解TeX的历史很有帮助，奈何两篇文章都是英文，这么好的文章应该分享给国内的朋友们，同时也为了回忆一下自己之前学的英语，这里翻译了其中的一篇文章，如果有错误，还望大家原谅&lt;br&gt;
    
    </summary>
    
      <category term="TeX" scheme="http://yoursite.com/categories/TeX/"/>
    
    
  </entry>
  
  <entry>
    <title>为你的Octopress博客添加SEO设置</title>
    <link href="http://yoursite.com/2014/08/20/2014-08-20-wei-ni-de-octopressbo-ke-tian-jia-seoshe-zhi/"/>
    <id>http://yoursite.com/2014/08/20/2014-08-20-wei-ni-de-octopressbo-ke-tian-jia-seoshe-zhi/</id>
    <published>2014-08-20T07:15:08.000Z</published>
    <updated>2016-03-06T13:32:44.000Z</updated>
    
    <content type="html">&lt;p&gt;既然我们创建了自己的博客，并且将其放到了网上，那么我们就希望能有很多人去阅读它，将博客的价值发挥出来。可是如何能让更多的人找到你的博客，如何能让搜索引擎找到你的博客，这就涉及到了SEO的问题。SEO是一个很大的学问，有很多专业的人士在从事这方面的工作，如果你使用过Wordpress或者自己当过站长，你应该知道SEO是一个很费脑袋的事情。幸好，我们拥有的只是一个小小的轻量化的博客，我们并不需要多么专业SEO的东西，这里我们只简单的说一些基本配置。当然了，如果你有着方面的兴趣和能力，你也可以用更高深的SEO来完善你的博客。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;为每篇博文增加关键字和描述&quot;&gt;&lt;a href=&quot;#为每篇博文增加关键字和描述&quot; class=&quot;headerlink&quot; title=&quot;为每篇博文增加关键字和描述&quot;&gt;&lt;/a&gt;为每篇博文增加关键字和描述&lt;/h2&gt;&lt;p&gt;在使用命令&lt;code&gt;rake new_post&lt;/code&gt;时我们建立的博文开头会有一些标签，为了做到让每篇博文被搜索到的可能性更大，信息更全。我们在&lt;strong&gt;Rakefile&lt;/strong&gt;中来添加一些信息。如下：&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;open(filename, &lt;span class=&quot;string&quot;&gt;&#39;w&#39;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; |post|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  post.puts &lt;span class=&quot;string&quot;&gt;&quot;---&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  post.puts &lt;span class=&quot;string&quot;&gt;&quot;layout: post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  post.puts &lt;span class=&quot;string&quot;&gt;&quot;title: \&quot;&lt;span class=&quot;subst&quot;&gt;#&amp;#123;title.gsub(&lt;span class=&quot;regexp&quot;&gt;/&amp;amp;/&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;&amp;amp;amp;&#39;&lt;/span&gt;)&amp;#125;&lt;/span&gt;\&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  post.puts &lt;span class=&quot;string&quot;&gt;&quot;date: &lt;span class=&quot;subst&quot;&gt;#&amp;#123;Time.now.strftime(&lt;span class=&quot;string&quot;&gt;&#39;%Y-%m-%d %H:%M&#39;&lt;/span&gt;)&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  post.puts &lt;span class=&quot;string&quot;&gt;&quot;comments: true&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  post.puts &lt;span class=&quot;string&quot;&gt;&quot;categories: &quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  post.puts &lt;span class=&quot;string&quot;&gt;&quot;keywords: &quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  post.puts &lt;span class=&quot;string&quot;&gt;&quot;description: &quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  post.puts &lt;span class=&quot;string&quot;&gt;&quot;---&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中&lt;em&gt;keywords&lt;/em&gt;和&lt;em&gt;description&lt;/em&gt;就是我们后加的。以后在创建新博文的时候，开头的标签便会多了这两项。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;layout: post&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;title: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;date: 2014-08-20 21:24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;comments: true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;categories: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;keywords:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;description:&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这时候填入相应的内容，本博文被搜索引擎搜到的概率就会提高。&lt;/p&gt;
&lt;h2 id=&quot;为你的整个博客添加关键字和描述&quot;&gt;&lt;a href=&quot;#为你的整个博客添加关键字和描述&quot; class=&quot;headerlink&quot; title=&quot;为你的整个博客添加关键字和描述&quot;&gt;&lt;/a&gt;为你的整个博客添加关键字和描述&lt;/h2&gt;&lt;p&gt;在博客配置的&lt;code&gt;_config.yml&lt;/code&gt;文件中，添加关于你整个博客的&lt;strong&gt;keywords&lt;/strong&gt;和&lt;strong&gt;description&lt;/strong&gt;内容，提高整个博客被搜索到的概率。&lt;/p&gt;
&lt;h2 id=&quot;使用统计工具&quot;&gt;&lt;a href=&quot;#使用统计工具&quot; class=&quot;headerlink&quot; title=&quot;使用统计工具&quot;&gt;&lt;/a&gt;使用统计工具&lt;/h2&gt;&lt;p&gt;你可以通过统计工具来监测你博客的访问情况。最好的两个统计工具，便是Google Analytics和百度统计了.Octopress已经初始自带了Google Analytics，你所要做的是去&lt;a href=&quot;www.google.com/analytics/&quot;&gt;Google Analytics网站&lt;/a&gt;申请一个帐号，配置好你的网址，将&lt;strong&gt;帐号名&lt;/strong&gt;和&lt;strong&gt;Trace ID&lt;/strong&gt;填入&lt;code&gt;_config.yml&lt;/code&gt;中即可。不过由于被墙的关系，一般用户使用google的服务有些困难，所以推荐使用百度统计。&lt;/p&gt;
&lt;p&gt;去&lt;a href=&quot;http://tongji.baidu.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;百度统计的网站&lt;/a&gt;，注册帐号（都是一样的步骤～～），填入自己的 网址。这时候百度统计会产生一个脚本&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      var _bdhmProtocol = ((&quot;https:&quot; == document.location.protocol) ? &quot; https://&quot; : &quot; http://&quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      document.write(unescape(&quot;%3Cscript src=&#39;&quot; + _bdhmProtocol + &quot;hm.baidu.com/h.js%3F25fb42e16458b238f8da9ba05d6b9d4d&#39; type=&#39;text/javascript&#39;%3E%3C/script%3E&quot;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;复制此脚本，将其添加到博客中的html文件中，便可使用。例如我的将其放到了&lt;code&gt;source/custom/_includes/after_footer.html&lt;/code&gt;文件中，这样配置成功后，会在你博客中的每个页面的最下面产生一个百度的小图标。&lt;/p&gt;
&lt;h2 id=&quot;提交博客给搜索引擎&quot;&gt;&lt;a href=&quot;#提交博客给搜索引擎&quot; class=&quot;headerlink&quot; title=&quot;提交博客给搜索引擎&quot;&gt;&lt;/a&gt;提交博客给搜索引擎&lt;/h2&gt;&lt;p&gt;博客建立好以后，需要提交给搜索引擎让其能够抓取你的网址。因为目前搜索引擎众多，所以可以使用两个方便的在线工具给提交给大多数的搜索引擎&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://urlc.cn/tool/addurl.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://urlc.cn/tool/addurl.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tool.lusongsong.com/addurl.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://tool.lusongsong.com/addurl.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;以上就是对于Octopress建立的博客所进行的简单SEO优化，正如前面所说，SEO是个很大的学问，如果想对你的博客进行进一步的优化，你需要学习其他SEO的知识了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;既然我们创建了自己的博客，并且将其放到了网上，那么我们就希望能有很多人去阅读它，将博客的价值发挥出来。可是如何能让更多的人找到你的博客，如何能让搜索引擎找到你的博客，这就涉及到了SEO的问题。SEO是一个很大的学问，有很多专业的人士在从事这方面的工作，如果你使用过Wordpress或者自己当过站长，你应该知道SEO是一个很费脑袋的事情。幸好，我们拥有的只是一个小小的轻量化的博客，我们并不需要多么专业SEO的东西，这里我们只简单的说一些基本配置。当然了，如果你有着方面的兴趣和能力，你也可以用更高深的SEO来完善你的博客。&lt;br&gt;
    
    </summary>
    
      <category term="Octopress" scheme="http://yoursite.com/categories/Octopress/"/>
    
    
  </entry>
  
  <entry>
    <title>Octopress的后续配置</title>
    <link href="http://yoursite.com/2014/08/19/2014-08-19-octopressde-hou-xu-pei-zhi/"/>
    <id>http://yoursite.com/2014/08/19/2014-08-19-octopressde-hou-xu-pei-zhi/</id>
    <published>2014-08-19T07:04:46.000Z</published>
    <updated>2016-03-06T13:32:44.000Z</updated>
    
    <content type="html">&lt;p&gt;在上一个博文中已经讲解了如何安装Octopress，但这只是一个简单的博客样式，还有许多东西需要我们慢慢来配置。由于本人对于HTML和CSS不是很熟悉，所以很多配置都是按照官方教程或者从网上直接复制粘贴运行的。到目前位置，配置出的博客还算满意。这里就将主要的配置记录一下&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;插入图片&quot;&gt;&lt;a href=&quot;#插入图片&quot; class=&quot;headerlink&quot; title=&quot;插入图片&quot;&gt;&lt;/a&gt;插入图片&lt;/h2&gt;&lt;p&gt;在写第一篇博文的时候，就涉及到了这个问题。Markdown的原生语法是不支持图片的，这里用的是&lt;a href=&quot;http://octopress.org/docs/plugins/image-tag/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方教程&lt;/a&gt;给出的方法，使用&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;% img [class names] /path/to/image [width] [height] [title text [alt text]] %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中&lt;code&gt;class names&lt;/code&gt;可以使用left，right替换，以区别图片显示的方向。&lt;/p&gt;
&lt;h2 id=&quot;安装Greyshade的主题&quot;&gt;&lt;a href=&quot;#安装Greyshade的主题&quot; class=&quot;headerlink&quot; title=&quot;安装Greyshade的主题&quot;&gt;&lt;/a&gt;安装Greyshade的主题&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Greyshade&lt;/strong&gt;是由&lt;a href=&quot;http://github.com/shashankmehta&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Shashank Mehta&lt;/a&gt;建立的一款Octopress主题，深受大家的喜欢。本人的博客也使用了此主题。但是由于其侧边栏支持的社交网站不包含中国的微薄等等，考虑到被墙的关系，因此使用起来很不方便，加上如果直接使用原生主题发现对中文字体的支持很不舒服。因此有人更改了此主题，使其更加符合中国用户的需求，添加了对微博的支持。主题地址在&lt;a href=&quot;https://github.com/allenhsu/greyshade&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/allenhsu/greyshade&lt;/a&gt;&lt;br&gt;接下来，用户便可按照之前文章中的命令来安装主题了。&lt;/p&gt;
&lt;h2 id=&quot;定制域名&quot;&gt;&lt;a href=&quot;#定制域名&quot; class=&quot;headerlink&quot; title=&quot;定制域名&quot;&gt;&lt;/a&gt;定制域名&lt;/h2&gt;&lt;p&gt;在刚开始创建博客的时候，Github默认分配的用户名是username.github.io。当然了，你也可以将自己的用户名绑定到你的博客上&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先在你的&lt;code&gt;source&lt;/code&gt;的目录下创建CNAME文件，并在里输入你的域名&lt;code&gt;XXXXX.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在你购买的域名管理器中，创建或修改A记录，指向&lt;strong&gt;207.97.227.245&lt;/strong&gt;这个地址。&lt;/li&gt;
&lt;li&gt;在你购买的域名管理器中，创建CNAME记录，将username.github.io.指向你的域名&lt;code&gt;www.XXXXX.com&lt;/code&gt;&lt;br&gt;接下来就慢慢等待吧，不同的域名管理网站对域名的解析时间不等～～&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;让博客中的链接在新窗口中打开&quot;&gt;&lt;a href=&quot;#让博客中的链接在新窗口中打开&quot; class=&quot;headerlink&quot; title=&quot;让博客中的链接在新窗口中打开&quot;&gt;&lt;/a&gt;让博客中的链接在新窗口中打开&lt;/h2&gt;&lt;p&gt;由于markdown不支持这一语法，如果要自己用html标签实现，又有些违背了markdown以内容为重的立意。可以通过将如下代码添加到 &lt;code&gt;source/_includes/custom/head.html&lt;/code&gt;文件末尾来实现：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function addBlankTargetForLinks () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $(&#39;a[href^=&quot;http&quot;]&#39;).each(function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      $(this).attr(&#39;target&#39;, &#39;_blank&#39;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$(document).bind(&#39;DOMNodeInserted&#39;, function(event) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  addBlankTargetForLinks();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;404页面&quot;&gt;&lt;a href=&quot;#404页面&quot; class=&quot;headerlink&quot; title=&quot;404页面&quot;&gt;&lt;/a&gt;404页面&lt;/h2&gt;&lt;p&gt;404页面也是一个博客或者网站设计时必须注意的问题。我们这里为了简便配置，使用了腾讯的公益404页面。具体创建方法如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在Octopress的目录下使用&lt;code&gt;rake new_page[&amp;#39;404&amp;#39;]&lt;/code&gt;，这时在&lt;code&gt;source&lt;/code&gt;目录下便会新建&lt;code&gt;404/index.markdown&lt;/code&gt;文件，将&lt;code&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;http://www.qq.com/404/search_children.js&amp;quot; charset=&amp;quot;utf-8&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;填入文件便可。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;添加评论&quot;&gt;&lt;a href=&quot;#添加评论&quot; class=&quot;headerlink&quot; title=&quot;添加评论&quot;&gt;&lt;/a&gt;添加评论&lt;/h2&gt;&lt;p&gt;Octopress貌似不支持评论功能，不过我们可以使用第三方强大的评论系统，例如国外的&lt;a href=&quot;https://www.disqus.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Disqus&lt;/a&gt;。&lt;br&gt;首先去Disqus上注册帐号，添加你的博客，然后将添加站点的信息写入Octopress的&lt;code&gt;_config.yml&lt;/code&gt;文件中&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# Disqus Comments&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;disqus_short_name: laoshuterry&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;disqus_show_comment_count: true # Disqus Comments&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;更改导航栏&quot;&gt;&lt;a href=&quot;#更改导航栏&quot; class=&quot;headerlink&quot; title=&quot;更改导航栏&quot;&gt;&lt;/a&gt;更改导航栏&lt;/h2&gt;&lt;p&gt;文件&lt;code&gt;source\_includes\custom\navigation.html&lt;/code&gt;文件中是导航栏的配置，默认安装完主题后，只有Blog和Archives两项。为了定制好自己博客的导航栏，我们需要加一些东西&lt;br&gt;原始导航栏如下：&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;main-navigation&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;&amp;#123; root_url &amp;#125;&amp;#125;/&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Blog&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;&amp;#123; root_url &amp;#125;&amp;#125;/blog/archives&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Archives&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;先变为&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;main&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;&amp;#123; root_url &amp;#125;&amp;#125;/&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;博客 | Blog&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;&amp;#123; root_url &amp;#125;&amp;#125;/blog/archives&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;档案 | Archives&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;&amp;#123; root_url &amp;#125;&amp;#125;/blog/categories&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;分类 | Categories&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;&amp;#123; root_url &amp;#125;&amp;#125;/about&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;关于我 | About Me&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这时导航栏就变成了我目前博客导航栏的样子。&lt;/p&gt;
&lt;h2 id=&quot;配“Read-More”&quot;&gt;&lt;a href=&quot;#配“Read-More”&quot; class=&quot;headerlink&quot; title=&quot;配“Read More”&quot;&gt;&lt;/a&gt;配“Read More”&lt;/h2&gt;&lt;p&gt;很多人都希望在自己的博客主题不要显示太多的文章内容，这时候我们可以添加&lt;code&gt;Read More&lt;/code&gt;标签实现。在新创建一篇博文时，可以在你想要断开隐藏的地方加入标签&lt;code&gt;&amp;lt;!--more--&amp;gt;&lt;/code&gt;。在&lt;code&gt;_config_yml&lt;/code&gt;配置文件中，作出如下更改&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;excerpt_link: &amp;quot;阅读更多&amp;quot;  	# &amp;quot;Continue reading&amp;quot; link text at the bottom of excerpted articles&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;excerpt_separator: &amp;quot;&amp;lt;!--more--&amp;gt;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样在首页显示时，不会显示出文章的全部，人们可以更快速的浏览你主页上面的其他内容。&lt;/p&gt;
&lt;p&gt;这里是对Octopress的一些配置。到目前为止，Octopress的配置可以说基本完成了，还有一个问题就是SEO的事情，这个下篇文章再说。&lt;br&gt;当然了，Octopress还有很多东西是学要继续深入研究的，目前还有很多东西自己不会弄，例如字体问题，侧边栏添加个性化标签，版权信息，云TAG等等。随着我对HTML和CSS的深入学习，希望这些东西慢慢都能加入进来吧。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在上一个博文中已经讲解了如何安装Octopress，但这只是一个简单的博客样式，还有许多东西需要我们慢慢来配置。由于本人对于HTML和CSS不是很熟悉，所以很多配置都是按照官方教程或者从网上直接复制粘贴运行的。到目前位置，配置出的博客还算满意。这里就将主要的配置记录一下&lt;br&gt;
    
    </summary>
    
      <category term="Octopress" scheme="http://yoursite.com/categories/Octopress/"/>
    
    
      <category term="octopress" scheme="http://yoursite.com/tags/octopress/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
      <category term="github pages" scheme="http://yoursite.com/tags/github-pages/"/>
    
      <category term="blog" scheme="http://yoursite.com/tags/blog/"/>
    
      <category term="seo" scheme="http://yoursite.com/tags/seo/"/>
    
  </entry>
  
  <entry>
    <title>利用Octopress和Github搭建个人博客</title>
    <link href="http://yoursite.com/2014/08/18/2014-08-18-li-yong-octopresshe-githubda-jian-ge-ren-bo-ke/"/>
    <id>http://yoursite.com/2014/08/18/2014-08-18-li-yong-octopresshe-githubda-jian-ge-ren-bo-ke/</id>
    <published>2014-08-18T09:39:49.000Z</published>
    <updated>2016-03-06T13:33:12.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;很久以前在CSDN博客上看到一片文章，讲的是写博客的好处。作为一个IT行业的程序猿，写博客对自己的发展也是有很大益处的。因此写博客的想法早早就扎根自己的心里。在尝试了一些免费博客空间后，觉得还是有个独立的博客空间比较好，无奈自己写的博文还比较少，暂时没必要花钱购买空间域名去搭建一个独立博客。后来阅读了许多编程高手的博客，发现利用Github和Octopress就可以搭建一个无限流量无限空间的博客系统。阅读了很多教程之后，开始了搭建过程。 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在安装Octopress的过程中，尽量查看&lt;a href=&quot;http://octopress.org/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Octopress&lt;/a&gt;和&lt;a href=&quot;https://pages.github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github Pages&lt;/a&gt;官方网页上的教程，上面有对安装过程中最详尽的解释。当然了，希望你的英语能过关。我在想什么时候可以弄出一个中文版本教程。本人的安装环境是搭建在虚拟机的Linux Mint 16，如果你使用的是Mac或者Windows，可能会出现各种各样的问题，希望你能Google自己搜寻解决。（度娘不好用，Trust me!）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;建立Octopress目录&quot;&gt;&lt;a href=&quot;#建立Octopress目录&quot; class=&quot;headerlink&quot; title=&quot;建立Octopress目录&quot;&gt;&lt;/a&gt;建立Octopress目录&lt;/h2&gt;&lt;p&gt;这一步很简单，通过git将Octopress克隆到本地，具体执行命令如下&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; git://github.com/imathis/octopress.git octopress&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; octopress&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;建立Ruby环境和安装Octopress&quot;&gt;&lt;a href=&quot;#建立Ruby环境和安装Octopress&quot; class=&quot;headerlink&quot; title=&quot;建立Ruby环境和安装Octopress&quot;&gt;&lt;/a&gt;建立Ruby环境和安装Octopress&lt;/h2&gt;&lt;p&gt;这一步是我出现问题最多的地方了，因为本人没有用过，甚至一点都不了解Ruby。只知道这是一个日本人发明的动态语言，跟Python类似。通过网上发现，很多人对Ruby的安装都有怨言，因为安装过程复杂，而且速度很慢，据说这也是为什么国内使用Ruby的人相对较少。Linux Mint 16默认安装了Ruby，通过命令&lt;code&gt;ruby --version&lt;/code&gt;可以查看当前Ruby版本。&lt;/p&gt;
&lt;p&gt;按照教程上所说，只要Ruby版本好大于1.9.3就可以支持，然后执行&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ gem install bundler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ bundle install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是在执行&lt;code&gt;bundle install&lt;/code&gt;过程中出现了各种各样的问题，其中有一个问题就是显示&lt;code&gt;Could not find RedCloth-4.2.9&lt;/code&gt;，为了解决此问题。我安装了可能需要的依赖包，这些都是通过查询Google试验出来的&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$sudo gem install RedCloth -v &amp;apos;4.2.9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$sudo apt-get install ruby1.9.1-dev&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;再次执行&lt;code&gt;bundle install&lt;/code&gt;，安装顺利完成，Octopress也成功安装。&lt;/p&gt;
&lt;h2 id=&quot;在Github上建立博客所需的repo&quot;&gt;&lt;a href=&quot;#在Github上建立博客所需的repo&quot; class=&quot;headerlink&quot; title=&quot;在Github上建立博客所需的repo&quot;&gt;&lt;/a&gt;在Github上建立博客所需的repo&lt;/h2&gt;&lt;p&gt;Octopress的后台其实就相当与Github上的一个仓库，只不过这个仓库里都是博客所需要的文件。&lt;br&gt;进入自己的Github页面，新建一个repository。&lt;/p&gt;
&lt;img src=&quot;/assets/images/01.png&quot; width=&quot;692&quot; height=&quot;438&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; username必须是自己Github账户的用户名&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;初始化Octopress&quot;&gt;&lt;a href=&quot;#初始化Octopress&quot; class=&quot;headerlink&quot; title=&quot;初始化Octopress&quot;&gt;&lt;/a&gt;初始化Octopress&lt;/h2&gt;&lt;p&gt;在octopress的目录下，有一个隐藏了的文件夹.themes，这里面放置了Octorpess所用到的主题模板，默认的是经典样式，如果你有新的主题模板，就将其文件夹放置到这个目录下，例如我的就是&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; ~/GithubB&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;/.themes $ ls&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4.0K drwxr-xr-x 4 rain rain 4.0K  8月 13 10:54 classic/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4.0K drwxr-xr-x 5 rain rain 4.0K  8月 13 15:46 oscailte/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4.0K drwxr-xr-x 5 rain rain 4.0K  8月 13 15:48 fabric/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4.0K drwxr-xr-x 5 rain rain 4.0K  8月 13 15:55 octostrap3/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后执行安装主题的命令&lt;code&gt;rake install&lt;/code&gt;，这样就会安装默认主题。想安装第三方主题则使用&lt;code&gt;rake install[&amp;#39;theme_name&amp;#39;]&lt;/code&gt;。这时候，主题已经安装完毕，我们开始生成博客真正需要的网页页面。&lt;/p&gt;
&lt;h2 id=&quot;将Octopress提交到Github&quot;&gt;&lt;a href=&quot;#将Octopress提交到Github&quot; class=&quot;headerlink&quot; title=&quot;将Octopress提交到Github&quot;&gt;&lt;/a&gt;将Octopress提交到Github&lt;/h2&gt;&lt;p&gt;对于将Octopress提交到Github上，涉及到很多Git的操作，幸好Octopress为我们集成了这所有的操作。输入命令&lt;code&gt;rake setup_github_pages&lt;/code&gt;，这时候rask需要你填入URL，我们便将建立username.githun.io仓库时产生的SSH或HTTP地址填入进去，rake会自动将需要提交的文件初始化。具体都有哪些操作请查看&lt;a href=&quot;http://octopress.org/docs/deploying/github/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方教程&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;接下来执行&lt;code&gt;rake generate&lt;/code&gt;，这时候便产生了真正的博客页面。以后每次更新主题，创建新博文后，都要执行此命令。然后执行命令&lt;code&gt;rake deploy&lt;/code&gt;将博客提交到Github上的username.github.io仓库的master分支中。大概等待10分钟左右，在浏览器中输入username.githun.io，便可以看到你的博客了！（Congritulations！）&lt;/p&gt;
&lt;p&gt;我在第一次执行这两条命令的时候，发现&lt;strong&gt; _deploy &lt;/strong&gt;文件夹下没有任何东西，因此Github的repo中没有任何东西，系统也没有任何提示。后来才知道原来自己的系统没有nodejs（天晓得居然还要这个东西～）。执行下面语句&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get isntall nodejs&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;重新执行以上两条命令，便可以了。&lt;/p&gt;
&lt;h2 id=&quot;一些注意的问题&quot;&gt;&lt;a href=&quot;#一些注意的问题&quot; class=&quot;headerlink&quot; title=&quot;一些注意的问题&quot;&gt;&lt;/a&gt;一些注意的问题&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;我们只是将博客相关的页面提交到了repo的master上，为了保存整个octopress的配置，最好备份一下。备份后Github的reop中，master便是博客文件，source分支便是所有的配置源文件。备份命令：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git add .&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git commit -m &lt;span class=&quot;string&quot;&gt;&#39;your message&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git push origin &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;以上建立的是用户级博客系统，Github还允许为你的每个工程repo建立单独的项目页面，具体的搭建方法本人没有尝试，请产看&lt;a href=&quot;http://octopress.org/docs/deploying/github/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方教程&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;以上方法绑定的是username.github.io的默认域名，Github Pages支持使用自己的域名，可惜本人没有，这里也就没有使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果你先安装了经典主题，然后又重新安装了第三方专题，在执行备份命令的时候可能会出现&lt;code&gt;fatal: Not a git repository: sass/inuitcss/../../.git/modules/sass/inuitcss&lt;/code&gt;的错误。这是由于git文件中的路径发生了改变，只需将&lt;code&gt;sass/inuitcss/.git&lt;/code&gt;中的&lt;code&gt;gitdir&lt;/code&gt;路径改变一下就可以了，例如我使用了第三方oscailte主题，便将路径改成&lt;code&gt;gitdir: ../../.themes/oscailte/.git/modules/sass/inuitcss&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;很久以前在CSDN博客上看到一片文章，讲的是写博客的好处。作为一个IT行业的程序猿，写博客对自己的发展也是有很大益处的。因此写博客的想法早早就扎根自己的心里。在尝试了一些免费博客空间后，觉得还是有个独立的博客空间比较好，无奈自己写的博文还比较少，暂时没必要花钱购买空间域名去搭建一个独立博客。后来阅读了许多编程高手的博客，发现利用Github和Octopress就可以搭建一个无限流量无限空间的博客系统。阅读了很多教程之后，开始了搭建过程。 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在安装Octopress的过程中，尽量查看&lt;a href=&quot;http://octopress.org/docs/&quot;&gt;Octopress&lt;/a&gt;和&lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt;官方网页上的教程，上面有对安装过程中最详尽的解释。当然了，希望你的英语能过关。我在想什么时候可以弄出一个中文版本教程。本人的安装环境是搭建在虚拟机的Linux Mint 16，如果你使用的是Mac或者Windows，可能会出现各种各样的问题，希望你能Google自己搜寻解决。（度娘不好用，Trust me!）&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Octopress" scheme="http://yoursite.com/categories/Octopress/"/>
    
    
      <category term="octopress" scheme="http://yoursite.com/tags/octopress/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
      <category term="github pages" scheme="http://yoursite.com/tags/github-pages/"/>
    
      <category term="blog" scheme="http://yoursite.com/tags/blog/"/>
    
      <category term="seo" scheme="http://yoursite.com/tags/seo/"/>
    
  </entry>
  
  <entry>
    <title>C语言历史与标准</title>
    <link href="http://yoursite.com/2014/08/18/2014-08-18-cyu-yan-li-shi-yu-biao-zhun/"/>
    <id>http://yoursite.com/2014/08/18/2014-08-18-cyu-yan-li-shi-yu-biao-zhun/</id>
    <published>2014-08-18T09:38:59.000Z</published>
    <updated>2016-03-06T13:32:38.000Z</updated>
    
    <content type="html">&lt;p&gt;不知道在哪里看到过这样一句话，大意是如果开始一个新的学科时，最好去阅读它的发展历史，这样有助于对此学科提起兴趣，并且能够更好地理解这个学科的知识。对于&lt;strong&gt;C语言&lt;/strong&gt;的学习，我认为这一点也是同样的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;C语言&lt;/strong&gt;的诞生和发展过程中，有很多东西都是值得津津乐道的：贝尔实验室，这个现代信息产业的孕育地；UNIX，里程碑般的操作系统；Brian Kernighan和Dennis Ritchie，&lt;strong&gt;C语言&lt;/strong&gt;之父……&lt;/p&gt;
&lt;p&gt;关于&lt;strong&gt;C语言&lt;/strong&gt;的发展史，很多资料和书里都已经有详细的介绍了。我这里只是总结一下，尤其是对各种标准的产生进行一下说明，因为这关系到以后C程序编写规范和编译方面的配置。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;strong&gt;C语言&lt;/strong&gt;的产生与UNIX是息息相关的。可以说，&lt;strong&gt;C语言&lt;/strong&gt;从某种角度上是UNIX的副产品（这么理解不一定百分之百正确）。Kernighan和Ritchie是为了更好地编写UNIX，从汇编语言和B语言发展出了&lt;strong&gt;C语言&lt;/strong&gt;，同时也出版了一部至今都是程序员必读的伟大著作&lt;strong&gt;《The C Programming Lanaguage》&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;由于&lt;strong&gt;TCPL&lt;/strong&gt;作为&lt;strong&gt;C语言&lt;/strong&gt;最开始的权威图书，因此第一版书中的&lt;strong&gt;C语言&lt;/strong&gt;标准便被称为&lt;strong&gt;K&amp;amp;R C&lt;/strong&gt;标准。这是&lt;strong&gt;C语言&lt;/strong&gt;的最早标准。&lt;/p&gt;
&lt;p&gt;1989年，&lt;strong&gt;C语言&lt;/strong&gt;被&lt;strong&gt;ANSI&lt;/strong&gt;标准化，被称为&lt;strong&gt;ANSI C&lt;/strong&gt;或&lt;strong&gt;C89&lt;/strong&gt;；1990年，&lt;strong&gt;C语言&lt;/strong&gt;又被&lt;strong&gt;ISO&lt;/strong&gt;标准化，被称为&lt;strong&gt;ISO C&lt;/strong&gt;或&lt;strong&gt;C90&lt;/strong&gt;。由于两套标准制定的时间相隔不长，切改动相对较小，ANSI又表示接受ISO的标准，因此这两个标准被统称为&lt;strong&gt;ANSI/ISO C&lt;/strong&gt;或&lt;strong&gt;C90&lt;/strong&gt;，由于这一标准最早的制定者是&lt;strong&gt;ANSI&lt;/strong&gt;,所以一般将这个标准成为&lt;strong&gt;ANSI C&lt;/strong&gt;标准。譬如C语言中标准输入输出的字符集，便是以这个标准产生的。&lt;/p&gt;
&lt;p&gt;1999年，&lt;strong&gt;C语言&lt;/strong&gt;标准又被ANSI/ISO修改，以增添新的特性支持，这便是&lt;strong&gt;C99&lt;/strong&gt;。但就目前来讲，很多编译器并不支持&lt;strong&gt;C99&lt;/strong&gt;，因此&lt;strong&gt;C99&lt;/strong&gt;得标准还没有得到完全的铺开。我们常用的仍是&lt;strong&gt;ANSI C&lt;/strong&gt;标准.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;GCC编译器已经支持了C99标准，只是在使用时要加上选项配置。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参考：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C Primer Plus&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/C_(programming_language&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;维基百科&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cm.bell-labs.com/who/dmr/chist.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Development of the C Language&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;不知道在哪里看到过这样一句话，大意是如果开始一个新的学科时，最好去阅读它的发展历史，这样有助于对此学科提起兴趣，并且能够更好地理解这个学科的知识。对于&lt;strong&gt;C语言&lt;/strong&gt;的学习，我认为这一点也是同样的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;C语言&lt;/strong&gt;的诞生和发展过程中，有很多东西都是值得津津乐道的：贝尔实验室，这个现代信息产业的孕育地；UNIX，里程碑般的操作系统；Brian Kernighan和Dennis Ritchie，&lt;strong&gt;C语言&lt;/strong&gt;之父……&lt;/p&gt;
&lt;p&gt;关于&lt;strong&gt;C语言&lt;/strong&gt;的发展史，很多资料和书里都已经有详细的介绍了。我这里只是总结一下，尤其是对各种标准的产生进行一下说明，因为这关系到以后C程序编写规范和编译方面的配置。&lt;br&gt;
    
    </summary>
    
      <category term="C/C++" scheme="http://yoursite.com/categories/C-C/"/>
    
    
      <category term="C" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="ANSIC" scheme="http://yoursite.com/tags/ANSIC/"/>
    
      <category term="ISO" scheme="http://yoursite.com/tags/ISO/"/>
    
      <category term="C99" scheme="http://yoursite.com/tags/C99/"/>
    
      <category term="历史" scheme="http://yoursite.com/tags/%E5%8E%86%E5%8F%B2/"/>
    
      <category term="标准" scheme="http://yoursite.com/tags/%E6%A0%87%E5%87%86/"/>
    
  </entry>
  
</feed>
